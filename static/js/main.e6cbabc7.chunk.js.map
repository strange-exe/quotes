{"version":3,"sources":["App.js","index.js"],"names":["config","Header","Layout","Content","App","useState","quotes","setQuotes","isLoading","setIsLoading","Quote","text","author","className","size","loading","header","onClick","fetch","then","response","json","data","catch","type","icon","DownloadOutlined","disabled","footer","href","bordered","dataSource","renderItem","quote","Item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAIMA,EACI,8BADJA,EAEK,iDAGHC,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QA+DDC,MA7Df,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEqBF,oBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,KAGPC,EAAQ,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACrB,OACE,8BACE,gCAASD,GADX,SACiC,8BAAOC,KAoB5C,OACE,kBAAC,IAAD,KACE,kBAACX,EAAD,KACE,yBAAKY,UAAU,aACb,0BAAMA,UAAU,aAAhB,0BAGJ,kBAACV,EAAD,CAASU,UAAU,aACjB,kBAAC,IAAD,CACEC,KAAK,QACLC,QAASP,EACTQ,OACE,kBAAC,IAAD,CACEC,QAAS,kBA3BnBV,EAAU,IACVE,GAAa,QACbS,MAAMlB,GACHmB,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLf,EAAUe,GACVb,GAAa,MAEdc,OAAM,WACLd,GAAa,OAiBPe,KAAK,UACLC,KAAM,kBAACC,EAAA,EAAD,MACNC,SAAUnB,EACVM,KAAK,SALP,gBASFc,OAAQ,uBAAGC,KAAM7B,GAAT,kBACR8B,UAAQ,EACRC,WAAYzB,EACZ0B,WAAY,SAACC,GAAD,OACV,kBAAC,IAAKC,KAAN,KACE,kBAACxB,EAAD,CAAOC,KAAMsB,EAAMtB,KAAMC,OAAQqB,EAAMrB,gB,OCzDrDuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.e6cbabc7.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Layout, Button, List } from 'antd'\nimport { DownloadOutlined } from '@ant-design/icons'\n\nconst config = {\n  apiUrl: 'https://type.fit/api/quotes',\n  repoUrl: 'https://github.com/ssokurenko/quotes-react-app'\n}\n\nconst { Header, Content } = Layout\n\nfunction App() {\n  const [quotes, setQuotes] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const Quote = ({ text, author }) => {\n    return (\n      <span>\n        <strong>{text}</strong> &nbsp; <span>{author}</span>\n      </span>\n    )\n  }\n\n  const getQuotes = () => {\n    setQuotes([])\n    setIsLoading(true)\n    fetch(config.apiUrl)\n      .then(function (response) {\n        return response.json()\n      })\n      .then((data) => {\n        setQuotes(data)\n        setIsLoading(false)\n      })\n      .catch(() => {\n        setIsLoading(false)\n      })\n  }\n  return (\n    <Layout>\n      <Header>\n        <div className=\"container\">\n          <span className=\"site-logo\">Inspirational Quotes</span>\n        </div>\n      </Header>\n      <Content className=\"container\">\n        <List\n          size=\"small\"\n          loading={isLoading}\n          header={\n            <Button\n              onClick={() => getQuotes()}\n              type=\"primary\"\n              icon={<DownloadOutlined />}\n              disabled={isLoading}\n              size=\"large\">\n              Fetch Quotes\n            </Button>\n          }\n          footer={<a href={config.repoUrl}>Fork on Github</a>}\n          bordered\n          dataSource={quotes}\n          renderItem={(quote) => (\n            <List.Item>\n              <Quote text={quote.text} author={quote.author} />\n            </List.Item>\n          )}\n        />\n      </Content>\n    </Layout>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}